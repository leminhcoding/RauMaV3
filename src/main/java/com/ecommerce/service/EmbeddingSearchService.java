package com.ecommerce.service;

import com.ecommerce.model.Product;
import com.ecommerce.model.ProductWithEmbedding;

import java.util.*;
import java.util.stream.Collectors;

public class EmbeddingSearchService {

    public static double cosineSimilarity(float[] a, float[] b) {
        double dot = 0, normA = 0, normB = 0;
        for (int i = 0; i < a.length; i++) {
            dot += a[i] * b[i];
            normA += a[i] * a[i];
            normB += b[i] * b[i];
        }
        return dot / (Math.sqrt(normA) * Math.sqrt(normB));
    }

    // D√πng ƒë·ªÉ l·∫•y top K g·∫ßn nh·∫•t (t√πy ch·ªçn)
    public static List<ProductWithEmbedding> searchByVector(
            float[] queryEmbedding,
            String rawQuery,
            List<ProductWithEmbedding> products,
            double threshold,
            String preferredCategory  // v√≠ d·ª•: "T·ªß l·∫°nh"
    ) {
        String queryLower = rawQuery.toLowerCase();

        List<Map.Entry<ProductWithEmbedding, Double>> scored = new ArrayList<>();

        for (ProductWithEmbedding p : products) {
            double score = cosineSimilarity(queryEmbedding, p.getEmbedding());

            if (score >= threshold) {
                if (p.getTenSanPham() != null && p.getTenSanPham().toLowerCase().contains(queryLower)) {
                    score += 0.2;  // bonus n·∫øu t√™n kh·ªõp t·ª´ kho√°
                }
                if (p.getRating() >= 4.5) {
                    score += 0.05; // ‚≠ê ∆Øu ti√™n s·∫£n ph·∫©m c√≥ rating cao
                }
                if (p.getReviewCount() >= 100) {
                    score += 0.03; // üó≥Ô∏è ∆Øu ti√™n s·∫£n ph·∫©m c√≥ nhi·ªÅu ƒë√°nh gi√°
                }

                int gia;
                try {
                    gia = Integer.parseInt(p.getGia().replaceAll("\\D", "")); // lo·∫°i b·ªè m·ªçi k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
                } catch (NumberFormatException e) {
                    gia = Integer.MAX_VALUE; // n·∫øu l·ªói th√¨ g√°n gi√° r·∫•t cao ƒë·ªÉ kh√¥ng ƒë∆∞·ª£c ch·ªçn
                }

                if (queryLower.contains("gi√° r·∫ª") && gia < 5000000) {
                    score += 0.04; // üí∏ ∆Øu ti√™n n·∫øu ng∆∞·ªùi d√πng mu·ªën gi√° r·∫ª v√† gi√° < 5 tri·ªáu
                }

                scored.add(new AbstractMap.SimpleEntry<>(p, score));
            }
        }

        // S·∫Øp x·∫øp: ∆∞u ti√™n ƒë√∫ng danh m·ª•c, r·ªìi theo ƒëi·ªÉm gi·∫£m d·∫ßn
        scored.sort((a, b) -> {
            ProductWithEmbedding p1 = a.getKey();
            ProductWithEmbedding p2 = b.getKey();

            boolean cat1 = preferredCategory != null && preferredCategory.equalsIgnoreCase(p1.getLoaiSanPham());
            boolean cat2 = preferredCategory != null && preferredCategory.equalsIgnoreCase(p2.getLoaiSanPham());

            if (cat1 != cat2) {
                return Boolean.compare(cat2, cat1); // true l√™n tr∆∞·ªõc
            }

            return Double.compare(b.getValue(), a.getValue()); // ƒëi·ªÉm gi·∫£m d·∫ßn
        });

        return scored.stream()
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
    }

    // D√πng trong ch·∫ø ƒë·ªô t√¨m ki·∫øm n√¢ng cao (RAG)
    public List<Product> searchByEmbedding(float[] queryEmbedding, List<ProductWithEmbedding> allProducts, int limit) {
        List<AbstractMap.SimpleEntry<Product, Double>> scored = new ArrayList<>();

        for (ProductWithEmbedding item : allProducts) {
            double sim = cosineSimilarity(queryEmbedding, item.getEmbedding());

            if (sim >= 0.4) {  // ‚úÖ l·ªçc ng∆∞·ª°ng cosine ‚â• 0.4
                scored.add(new AbstractMap.SimpleEntry<>(item.toProduct(), sim));
            }
        }

        // S·∫Øp x·∫øp theo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·∫£m d·∫ßn
        scored.sort((a, b) -> Double.compare(b.getValue(), a.getValue()));

        return scored.stream()
                .limit(limit)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
    }
}
